{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","resources/elements/date-picker.js","resources/elements/react-date.js","resources/react-components/formatted-date.js","resources/value-converters/date.js"],"names":["App","startDate","dateChanged","date","debug","testing","configure","aurelia","use","standardConfiguration","globalResources","developmentLogging","plugin","start","then","setRoot","config","DatePicker","Element","element","selectedDateChanged","render","selectedDate","onChange","ReactDate","formatChanged","format","FormattedDate","props","Component","defaultProps","Date","DateValueConverter","toView","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;MAEaA,cAAAA;;;;WACXC,YAAY;;;kBAEZC,mCAAYC,MAAM;AAChB,WAAKF,SAAL,GAAiBE,IAAjB;AACD;;;;;;;;;;;oBCPY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCECC,YAAAA;;;;;;;;;;AAAT,WAASA,SAAT,CAAmBC,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,eAFH,CAEmB,CAAC,mCAAD,CAFnB;;AAIA,QAAI,sBAAYN,KAAhB,EAAuB;AACrBG,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYN,OAAhB,EAAyB;AACvBE,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UChBeT,YAAAA;AAAT,WAASA,SAAT,CAAmBU,MAAnB,EAA2B,CAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCKYC,qBAAAA,qBAFZ,8BAAO,CAAC,uCAAD,CAAP,WACA,8BAAOC,OAAP;AAKC,wBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AACnB,WAAKA,OAAL,GAAeA,OAAf;AACD;;yBAEDC,qDAAsB;AACpB,WAAKC,MAAL;AACD;;yBAEDA,2BAAS;AAAA;;AACP,yBAASA,MAAT,CACE;AACE,kBAAU,KAAKC,YADjB;AAEE,kBAAU;AAAA,iBAAQ,MAAKC,QAAL,CAAc,EAAEpB,MAAMA,IAAR,EAAd,CAAR;AAAA;AAFZ,QADF,EAKE,KAAKgB,OALP;AAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCpBUK,oBAAAA,oBAFZ,yCACA,8BAAON,OAAP;AAKC,uBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AACnB,WAAKA,OAAL,GAAeA,OAAf;AACD;;wBAEDjB,qCAAc;AACZ,WAAKmB,MAAL;AACD;;wBAEDI,yCAAgB;AACd,WAAKJ,MAAL;AACD;;wBAEDA,2BAAS;AACP,yBAASA,MAAT,CACE;AACE,cAAM,KAAKlB,IADb;AAEE,gBAAQ,KAAKuB;AAFf,QADF,EAKE,KAAKP,OALP;AAOD;;;;;;;;;aAtBkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCNAQ;;;AACjB,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oDACf,4BAAMA,KAAN,CADe;AAElB;;gCAEDP,2BAAS;AACL,gBAAI,CAAC,KAAKO,KAAL,CAAWzB,IAAhB,EAAsB;AAClB,uBAAO,IAAP;AACH;;AAHI,yBAKkB,KAAKyB,KALvB;AAAA,gBAKCzB,IALD,UAKCA,IALD;AAAA,gBAKOuB,MALP,UAKOA,MALP;;;AAOL,mBACI;AAAA;AAAA;AACK,sCAAOvB,IAAP,EAAauB,MAAb,CAAoBA,MAApB;AADL,aADJ;AAKH;;;MAjBsC,gBAAMG;;sBAA5BF;;;AAoBrBA,kBAAcG,YAAd,GAA6B;AACzB3B,cAAM,IAAI4B,IAAJ,EADmB;AAEzBL,gBAAQ;AAFiB,KAA7B;;;;;;;;;;;;;;;;;;;;;;;;MCrBaM,6BAAAA;;;;;iCACXC,yBAAOC,OAAsC;AAAA,UAA/BR,MAA+B,uEAAtB,oBAAsB;;AAC3C,aAAO,sBAAOQ,KAAP,EAAcR,MAAd,CAAqBA,MAArB,CAAP;AACD","file":"app-bundle.js","sourcesContent":["import moment from 'moment';\n\nexport class App {\n  startDate = moment();\n  \n  dateChanged(date) {\n    this.startDate = date;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .globalResources(['./resources/value-converters/date']);\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDatePicker from 'react-datepicker';\nimport { noView, bindable, inject } from 'aurelia-framework';\n\n@noView(['react-datepicker/react-datepicker.css'])\n@inject(Element)\nexport class DatePicker {\n  @bindable selectedDate;\n  @bindable onChange;\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  selectedDateChanged() {\n    this.render();\n  }\n\n  render() {\n    ReactDOM.render(\n      <ReactDatePicker\n        selected={this.selectedDate}\n        onChange={date => this.onChange({ date: date })}\n      />,\n      this.element\n    );\n  }\n\n  // How to use native DOM events to pass the changed date\n  /*render() {\n    ReactDOM.render(\n      <ReactDatePicker\n        selected={this.selectedDate}\n        onChange={date => {\n          let event = new CustomEvent('change', { 'detail': date });\n\n          // Dispatch the event.\n          this.element.dispatchEvent(event);\n        }\n        }\n      />,\n      this.element\n    );\n  }*/\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { noView, bindable, inject } from 'aurelia-framework';\nimport FormattedDate from '../react-components/formatted-date';\n\n@noView()\n@inject(Element)\nexport class ReactDate {\n  @bindable date;\n  @bindable format = 'dddd, MMMM D, YYYY';\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  dateChanged() {\n    this.render();\n  }\n\n  formatChanged() {\n    this.render();\n  }\n\n  render() {\n    ReactDOM.render(\n      <FormattedDate \n        date={this.date}\n        format={this.format}\n      />,\n      this.element\n    );\n  }\n}\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default class FormattedDate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.date) {\r\n            return null;\r\n        }\r\n\r\n        let { date, format } = this.props;\r\n        \r\n        return (\r\n            <span>\r\n                {moment(date).format(format)}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nFormattedDate.defaultProps = { \r\n    date: new Date(),\r\n    format: 'dddd, MMMM D, YYYY'\r\n };","import moment from 'moment';\r\n\r\nexport class DateValueConverter {\r\n  toView(value, format = 'dddd, MMMM D, YYYY') {\r\n    return moment(value).format(format);\r\n  }\r\n}"],"sourceRoot":".."}